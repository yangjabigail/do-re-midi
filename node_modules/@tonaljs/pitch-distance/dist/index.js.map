{"version":3,"sources":["../index.ts"],"sourcesContent":["import { PitchCoordinates } from \"@tonaljs/pitch\";\nimport {\n  IntervalLiteral,\n  IntervalName,\n  interval as asInterval,\n  coordToInterval,\n} from \"@tonaljs/pitch-interval\";\nimport {\n  NoteLiteral,\n  NoteName,\n  note as asNote,\n  coordToNote,\n} from \"@tonaljs/pitch-note\";\n\n/**\n * Transpose a note by an interval.\n *\n * @param {string} note - the note or note name\n * @param {string} interval - the interval or interval name\n * @return {string} the transposed note name or empty string if not valid notes\n * @example\n * import { transpose } from \"@tonaljs/core\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * transpose(\"D\", \"3M\") // => \"F#\"\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nexport function transpose(\n  noteName: NoteLiteral,\n  intervalName: IntervalLiteral | [number, number],\n): NoteName {\n  const note = asNote(noteName);\n  const intervalCoord = Array.isArray(intervalName)\n    ? intervalName\n    : asInterval(intervalName).coord;\n  if (note.empty || !intervalCoord || intervalCoord.length < 2) {\n    return \"\";\n  }\n  const noteCoord = note.coord;\n  const tr: PitchCoordinates =\n    noteCoord.length === 1\n      ? [noteCoord[0] + intervalCoord[0]]\n      : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\n  return coordToNote(tr).name;\n}\n\n// Private\nexport function tonicIntervalsTransposer(\n  intervals: string[],\n  tonic: string | undefined | null,\n) {\n  const len = intervals.length;\n  return (normalized: number) => {\n    if (!tonic) return \"\";\n    const index =\n      normalized < 0 ? (len - (-normalized % len)) % len : normalized % len;\n    const octaves = Math.floor(normalized / len);\n    const root = transpose(tonic, [0, octaves]);\n    return transpose(root, intervals[index]);\n  };\n}\n\n/**\n * Find the interval distance between two notes or coord classes.\n *\n * To find distance between coord classes, both notes must be coord classes and\n * the interval is always ascending\n *\n * @param {Note|string} from - the note or note name to calculate distance from\n * @param {Note|string} to - the note or note name to calculate distance to\n * @return {string} the interval name or empty string if not valid notes\n *\n */\nexport function distance(\n  fromNote: NoteLiteral,\n  toNote: NoteLiteral,\n): IntervalName {\n  const from = asNote(fromNote);\n  const to = asNote(toNote);\n  if (from.empty || to.empty) {\n    return \"\";\n  }\n\n  const fcoord = from.coord;\n  const tcoord = to.coord;\n  const fifths = tcoord[0] - fcoord[0];\n  const octs =\n    fcoord.length === 2 && tcoord.length === 2\n      ? tcoord[1] - fcoord[1]\n      : -Math.floor((fifths * 7) / 12);\n\n  // If it's unison and not pitch class, it can be descending interval (#243)\n  const forceDescending =\n    to.height === from.height &&\n    to.midi !== null &&\n    from.midi !== null &&\n    from.step > to.step;\n  return coordToInterval([fifths, octs], forceDescending).name;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,4BAKO;AACP,wBAKO;AAcA,SAAS,UACd,UACA,cACU;AACV,QAAM,WAAO,kBAAAA,MAAO,QAAQ;AAC5B,QAAM,gBAAgB,MAAM,QAAQ,YAAY,IAC5C,mBACA,sBAAAC,UAAW,YAAY,EAAE;AAC7B,MAAI,KAAK,SAAS,CAAC,iBAAiB,cAAc,SAAS,GAAG;AAC5D,WAAO;AAAA,EACT;AACA,QAAM,YAAY,KAAK;AACvB,QAAM,KACJ,UAAU,WAAW,IACjB,CAAC,UAAU,CAAC,IAAI,cAAc,CAAC,CAAC,IAChC,CAAC,UAAU,CAAC,IAAI,cAAc,CAAC,GAAG,UAAU,CAAC,IAAI,cAAc,CAAC,CAAC;AACvE,aAAO,+BAAY,EAAE,EAAE;AACzB;AAGO,SAAS,yBACd,WACA,OACA;AACA,QAAM,MAAM,UAAU;AACtB,SAAO,CAAC,eAAuB;AAC7B,QAAI,CAAC;AAAO,aAAO;AACnB,UAAM,QACJ,aAAa,KAAK,MAAO,CAAC,aAAa,OAAQ,MAAM,aAAa;AACpE,UAAM,UAAU,KAAK,MAAM,aAAa,GAAG;AAC3C,UAAM,OAAO,UAAU,OAAO,CAAC,GAAG,OAAO,CAAC;AAC1C,WAAO,UAAU,MAAM,UAAU,KAAK,CAAC;AAAA,EACzC;AACF;AAaO,SAAS,SACd,UACA,QACc;AACd,QAAM,WAAO,kBAAAD,MAAO,QAAQ;AAC5B,QAAM,SAAK,kBAAAA,MAAO,MAAM;AACxB,MAAI,KAAK,SAAS,GAAG,OAAO;AAC1B,WAAO;AAAA,EACT;AAEA,QAAM,SAAS,KAAK;AACpB,QAAM,SAAS,GAAG;AAClB,QAAM,SAAS,OAAO,CAAC,IAAI,OAAO,CAAC;AACnC,QAAM,OACJ,OAAO,WAAW,KAAK,OAAO,WAAW,IACrC,OAAO,CAAC,IAAI,OAAO,CAAC,IACpB,CAAC,KAAK,MAAO,SAAS,IAAK,EAAE;AAGnC,QAAM,kBACJ,GAAG,WAAW,KAAK,UACnB,GAAG,SAAS,QACZ,KAAK,SAAS,QACd,KAAK,OAAO,GAAG;AACjB,aAAO,uCAAgB,CAAC,QAAQ,IAAI,GAAG,eAAe,EAAE;AAC1D;","names":["asNote","asInterval"]}